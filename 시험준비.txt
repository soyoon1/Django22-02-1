폰트어썸 20210841@duksung.ac.kr  yoonjoomam1!
전체 검색 ctrl + shift + f   ctrl + f
blog_list.html 파일을 메모장으로 열기 ctrl+ a ctrl+v
앱 바로 밑에 static/앱이름   ch3에 있는 bootstrap4 들고오기 static/앱이름에 마우스오른쪽버튼 눌러 붙여넣기 <!DOCTYPE html>없이면 붙여넣기 그 밑에
{% load static %} <link href="{% static 'blog/bootstrap/css/bootstrap.min.css '%}  스테틱 밑에 있는 경로 넣기
속성에 media="screen" 추가하기 # 출력할 때 부트스트랩 적용하지 않는다. 다시 재구동하기.
앱/urls.py 새로 만들기!
앱이름/templates/앱이름 폴더 새로 만들기(앱이름은 이미 있고 그 밑에 templates 만드는 것부터 시작.
앱이름/static/앱이름 만들어서 bootstrap4파일 집어넣기
각 장고 앱에 tests.py 생성
urls  views  models

function doSomething(){
    let a = document.getElementById('inputA').value;
    document.getElementById("valueA").innerHTML = a;
}
function whatTimeIsIt(){
    alert(new Date());
}

<script type="type/javascript" src="add_teo_numbers.js"></script>
<link href="./practice.css" rel="stylesheet" type="text/css">

부트스트랩
부트스트랩 배경색 - Utilities - Colors
getbootstrap.com

    <link href="/static/blog/bootstrap4/css/bootstrap.min.css" rel="stylesheet" type="text/css" media="screen"></link>
    <script src="https://kit.fontawesome.com/eca5e2617c.js" crossorigin="anonymous"></script>

4.5로 바꾸기
download jsDelivr에서 세 줄 복사

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous"></script>

html문서에서 <link href="./bootstrap4/css/bootstrap/min.css" rel="stylesheet" type="text/css> head부분에 넣기

Components에 Navbar 있음.
<div class="container"> - 화면 좌우의 여백을 위한 container
bootstrap은 화면 폭을 12칸으로 나누어 관리 화면 폭 크기에 따라 유연하게 변화함.
<div class="row">
    <div class="col-9">
    </div>
    <div class="col-3">
        <img src="dgsd" class="img-fluid w-100"> 허용된 폭 최대로 이미지 크기 조정
    </div>
</div>

Spacing margin padding  m   p    t  b  l  r  x  y  ex) <div class="row my-3"> (내비게이션 바와 내용 사이에 마진넣기)
<ul class="navber-nav ml-auto"> (내비게이션 바 오른쪽 정렬하기 왼쪽 마진 최대한 확보하라는 의미)
col-md-8 col-lg-9     col-md-4 col-lg-3

startbootstrap.com -> 탬플릿 - blog - blog home - free download

Bootstrap Card  blog home 에서 복붙
<!-- Featured blog post-->

             <!--약속된 postlist를 변수 p로 받았기 때문.-->
          <div class="card mb-4">

            <img class="card-img-top" src="https://picsum.photos/seed/9/800/200" alt="random image" />

            <div class="card-body">
                <h2 class="card-title">카테고리 있는 포스트</h2>

                <h5 class="text-muted">카테고리.. 프로그래밍</h5>   <!--models에 있는 필드명과 같아야 함.-->

                <p class="card-text">카테고리.. 프로그래밍</p>
                <a class="btn btn-primary" href="/blog/9/">Read more →</a>
            </div>
            <div class="card-footer">
                <div class="small text-muted">2022-10-25 04:10:35</div>
                <a href="#">ADMIN</a>
            </div>
          </div>
Bootstrap table

<table class="table table-responsive table-hover table-striped table-bordered my-5">
      <thead>
        <tr>
          <th scope="col">#</th>
          <th scope="col">First</th>
          <th scope="col">Last</th>
          <th scope="col">Handle</th>
          <th scope="col">First</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th scope="row">1</th>
          <td>Mark</td>
          <td>Otto</td>
          <td>@mdo</td>
        </tr>
        <tr>
          <th scope="row">2</th>
          <td>Jacob</td>
          <td>Thornton</td>
          <td>@fat</td>
        </tr>
        <tr>
          <th scope="row">3</th>
          <td>Larry</td>
          <td>the Bird</td>
          <td>@twitter</td>
        </tr>
      </tbody>
    </table>

Bootstrap modal - 내용을 정돈해서 보여줄 수 있는 컨테이너
    <!-- Modal -->
    <div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel"><i class="fa-solid fa-right-to-bracket"></i> LogIn</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="row">
              <div class="col-6">
                <button type="button" class="btn btn-outline-dark btn-block btn-sm"> <i class="fa-brands fa-google"></i> LogIn with Google</button>
                <button type="button" class="btn btn-outline-dark btn-block btn-sm"><i class="fa-regular fa-envelope"></i> LogIn with Email</button>
              </div>
              <div class="col-6">
                <button type="button" class="btn btn-outline-dark btn-block btn-sm"><i class="fa-regular fa-envelope"></i> SignUp with Email</button>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

bootstrap button 위에 예시 있음 btn-block btn-sm 은 크기 정규화
bootstrap carousel 슬라이드 사진 계속 넘어감 맨 앞에 캐러셀 전체 아이디 들어감.
collapse 버튼 병함. 토글 버튼 index.html에 있음.
forms, listgroup list-group-item  index.html에 있음.

startbootatrap - live priview  페이지소스보기

fontawesome 아이콘 추가
venv\Scripts\activate.bat   deactivate
pip install django  pip list
djangdo-admin startproject 프로젝트이름 .  장고 프로젝트 생성하기
python manage.py migrate  데이터베이스 생성
python manage.py createsuperuser  관리자 계정 생성하기

python manage.py makemigrations  python manage.py migrate
python manage.py startapp 앱 이름  django 앱 생성 명령어
python manage.py runserver 서버 구동
pip install pillow pip install beautifulsoup4 설치

시작!!
앱 만들기
가상환경실행 후 앱 만들기
python manage.py start 앱 이름  ls   파이참에서 admin.py apps.py models.py tests.py views.py생긴 것 볼 수 있음.

모델 만들기(Post)
앱 폴더\models.py 에 ...
blog\models.py 참고하기!! 다 있음.
settings.py 에 앱 추가하기!!  '앱 이름'  INSTALLED_APPS 에 추가 (앱 등록하는 과정)
데이터베이스에 post모델 반영
python manage.py makemigrations  python manage.py migrate

관리제페이지에서 첫 포스트 작성하기
관리자 페이지에 post모델 추가하기
앱이름\admin.py 에
from .models import 모델이름
admin.site.register(모델이름)

새로운 포스트생성하기 관리자 페이지에서 포스트생성
포스트 개선하기
앱이름/models.py 에 created_at 밑에.
__str__ 함수로 모델의 string 표현방법 정의하기
def __str__(self):
    return f'[{self.pk}]{self.title}'

서울기준으로 작성시각 설정하기
가장 첫 번째/Settings.py에서 TIME_ZONE 설정 'Asia/Seoul' USE_TZ = False

자동으로 작성 시각과 수정시각 저장하기
auto_now_add(새로 작성했을 때 생성)와 auto_now(수정했을 때 업데이트)  마지막으로 저장된 시점 처음 레코드가 생성된 시점
앱이름/models.py에
created_at = models.DateTimeField(auto_now_add=True)  # 처음 레코드 생성될 때 현재 시각이 자동으로 저장되게 함.
updated_at = models.DateTimeField(auto_now=True)   # 다시 저장할 때 마다 그 시각이 저장됨.
마이그레이션 python manage.py makemigrations python manage.py migrate

포스트 목록 페이지 만들기
가장 첫번째/urls.py에 urlpatterns에 path('blog/', include('blog.urls')), 추가
path('admin/', admin.site.urls)
관리자 페이지 admin/ 대문은 그냥 자기소개페이지 /about_me/ 블로그 목록 blog/ 블로그 상세 /blog/포스트pk
앱/urls.py 새로 만들기 !
from django.urls import path
from . import views     # 현재 폴더에 있는 views.py를 사용할 수 있게 가져오라는 뜻임.

urlpatterns = [
    # 이 부분을 채워야 함.
]

FBV 스타일로 post_list 페이지 만들기      함수 function based view

앱이름/urls.py에 내용 추가하기
            가장첫번째 urls.py에 urlpatterns에 path('blog/', include('blog.urls')), 추가
앱이름/urls.py에 path('', views.index(함수이름임)), 추가              입력된 URL이 'blog/'로 끝난다면 임포트한 views.py에 정의되어있는 index()함수를 실행하도록 만든 코드

앱이름/views.py에 index()함수 정의하기
def index(request):
    return render(
        request,
        'blog/index.html',     사용할 템플릿
    )  추가 렌더함수 리턴해줌. 웹 브라우저에 보여지는 내용 만들어주는 기능 갖고 있음.
터미널에서 서버 다시 실행하기 -> TemplatesDoesNotExist at /blog/ 나오면 잘 된 것

템플릿 파일 만들기
앱이름/templates/앱이름 폴더 새로 만들기!!! (블로그는 이미 있고 그 밑에 templates 만드는 것부터 시작)
앱이름/templates/앱이름/index.html에 작성하기..

블로그 페이지에 포스트 목록 나열하기
쿼리로 post 목록 가져오기  쿼리: 데이터베이스의 데이터를 가져오거나 수정,삭제 등의 행위를 위한 요청
models.py에 정의되어 있는 Post모델을 임포트 -> index()함수에서 Post.objects.all()로 모든 Post 레코드를 가져와 posts에 저장. -> render()함수 안에 post를 딕셔너리 형태로 추가
앱이름/views.py 에 from .models import Post(모델이름) 추가 그리고 변수만들기
ex) posts=Post.objects.all()  모델명.objects.all() 해야함!!!!

def index(request):
    posts=Post.objects.all()
    return render(
        request,
        'blog/index.html',     사용할 템플릿
        { 'posts':posts, }     템플릿에 넘겨줄 값 딕셔너리 형태로..
    )
앱이름/templates/blog/index.html에      (모델의 필드값 보여줌)
{% for p in posts %}
    <hr/>                              <h3>{{ p }}</h3> # Post 레코드가 모두 나열됨. __str__() 함수로 정의한 대로 포스트 제목과 번호가 나타남.
    <h2>{{p.title}}</h2>
    <h4>{{p.created_at}}</h4>       {% %} 사이의 코드는 표현식이고 {{ }} 사이의 코드는 출력
    <p>{{p.content}}</p>
{% endfor %}

template 태그 : {% 문법 %}  {% for in %} ~ {% endfor %}   {% if %} ~ {% elif %} ~ {% else %} ~ {% endif %} {% with 변수명='값' %}
{% csrf_token %}
template 변수 : {{ 변수 }}
template 필터 : {{ 변수|옵션 }}

최신 포스트부터 보여주기
앱이름/views.py에   모델명.objects.all().order_by('-pk')  pk 역순으로 나열  앱이름/views.py 고치면 글들이 역순으로 나열됨.

FBV로 post_detail 페이지 만들기  포스트 상세 페이지 만들기
# 가장첫번째 /urls.py 'blog/'
모델명.objects.get(pk='pk') url에서 가져온 pk와 일치하는 post 를 가져옴.
앱이름/urls.py 의 urlpatterns에 path('<int:pk>/', views.single_post_page), 추가
앱이름/views.py에 함수 만들기
def single_post_page(request, pk):
    post = Post.objects.get(pk=pk)

    return render(
        request,
        'blog/single_post_page.html',   사용할 템플릿
        { 'post':post, }                템플릿에 넘겨줄 값 딕셔너리 형태로
    )
앱이름/templates/앱이름/single_post_page.html 이름 같기만 하면 됨!!
html만들어서 수정하기
lang ="ko"  title {{ post.title }} - Blog
<nav> <a href="/blog/">Blog</a> </nav>
<h1>{{ post.title }}</h1>
<h4>{{post.created_at}}</h4>
<p>{{post.content}}</p>
<hr/>
<h3>여기 댓글이 들어올 수 있겠죠?</h3>

포스트 제목에 링크 만들기
get_absolute_url()으로 고유 URL 부여하기
index.html 수정하기 <h2><a href="{{ p.get_absolute_url }}">{{p.title}}</a></h2>
get_absolute_url() 함수 정의하기.
개별 레코드의 고유 URL을 모델에서 get_absolute_url()로 정의
앱이름/models.py에 함수 정의
def get_absolute_url(self):
    return f'/blog/{self.pk}/'        # 문자열일 때 f''한다고 함..
앱이름/templates/앱이름/post_list.html에 타이틀부분 <a href="{{ p.get_absolue_url }}">로 고치기
대문 상세 페이지도 만듦. landing.html, about_me.html

여기부터 새로운 앱임!!
single_pages 앱을 위한 URL 지정하기
가장 첫번째/urls.py에 urlpatterns에 path('', include('single_pages.urls'))
앱이름/urls.py 만들기 !
from django.urls import path
from . import views

urlpatterns = [ # IP주소/
    path('', views.landing),            # IP 주소/
    path('about_me/', views.about_me)   # IP 주소/about_me/
]
views.py에 함수 정의하기
views.py에 landing, about_me 함수 만들 것
from django.shortcuts import render

# Create your views here.
def landing(request):
    return render(request, 'single_pages/landing.html')

def about_me(request):
    return render(request, 'single_pages/about_me.html')

single_pages/templates/singlepages 폴더 만들기! 그 안에 landing.html 과 about_me.html 만들기
landing.html 과 about_me.html 참고

CBV로 페이지 만들기
ListView로 포스트 목록 페이지 만들기  blog/views.py 주석 처리 혹은 삭제!
앱이름/urls.py urlpatterns에 path('', views.PostList.as_view()),추가 PostList는 모델이름+List, as_view()는 클래스 안 메소드를 의미
앱이름/views.py에 from django.views.generic import ListView 추가,
class PostList(ListView):
    model=Post
    ordering = '-pk'  # 모델 이름만 설정하면 자동 호출 pk값이 작은 순서대로 보여달란 뜻임. 우리가 만들었던 index함수 주석처리하거나 삭제하기              # 밑에 줄에 template_name = 'blog/index.html' 해도 됨
ListView는 (모델명)_list.html을 템플릿으로 인지하기 때문에 index.html을 post_list.html로 변경해야함. post_list.html에서 {% for p in post_list %}로 교체

DetailView로 포스트 상세 페이지 만들기
앱이름/views.py 에서 from django.shortscuts import render없애기(나중에 필요함!!), from django.views.generic import ListView, DetailView 로 수정
class PostDetail(DetailView):         장고 제공 클래스 상속받아 쓰고 있음.
    model = Post
앱이름/urls.py에 urlpattens에 path('<int:pk>/', view.PostDetail.as_view()), 추가
DetailView는 (모델명)_detail.html을 템플릿으로 인지, single_post_page.html을 post_detail.html으로 변경

기존 html파일 적용하기!!
정적 파일 관리 (CSS 파일 적용하기)
앱 폴더에 static 폴더 만들고, CSS 파일 넣기
앱이C름/templates/앱이름/post_list.html에 <!DOTYPE html> 밑줄에 {% load static %} 추가, 헤드부분에
<link href="{% static 'blog/bootstrap4/css/bootstrap.min.css' %}" rel="stylesheet" type="text/css" media="screen"></link> 추가
앱 폴더 안에 static 폴더 만든 뒤, 그 안에 다시 앱 이름으로 된 폴더(ex)blog)를 생성해야함. 다시 runserver해야 인식됨 !  만들기 !

포스트 상세 페이지에 부트스트랩적용하기
html코드에도 <div id="main-area">
부트스트랩

미디어 파일 관리하기 (ImageField)
업로드한 파일이 저장될 폴더 지정 -> 가장첫번째/settings.py에 MEDIA_URL = '/media/' MEDIA_ROOT = os.path.join(BASE_DIR, '_media')
이미지 파일을 저장할 수 있는 ImageField 앱이름/models.py에 created_at 위에 head_image = models.ImageField(upload_to='blog/images/%y/%m/%d/', blank=True)

데이터베이스에 변경사항 반영하기
pip install Pillow
python manage.py makemigrations python manage.py migrate

미디어 파일을 위한 URL 지정하기
가장 첫번째/urls.py에 from django.conf import settings   from django.conf.urls.static import static (첫번째 줄)
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) 추가 (가장 마지막 줄)
head_image의 이미지 파일을 템플릿에서 출력
앱이름/templates/앱이름/post_list.html에서 <!--Blog Post--> 밑에 <img class="card-img-top" src="{{p.head_image.url}}" alt="{{p}}의 head_image" />로 교체
앱이름/templates/앱이름/post_detail.html 에 이미지 부분을 {{ post.head_image.url }} 고치기
미디어 파일은 알아서 생성됨.

파일 업로드를 위한 FileField
앱이름/models.py에 head_image 밑에 file_upload = models.FileField(upload_to='blog/files/%Y/%m/%d/', blank=True) 추가

장고 템플리 언어
장고로 개발할 시 html 템플릿에서 사용할 수 있는 특별한 규칙 또는 문법
html은 마크업언어로 자체적으로는 프로그래밍적 로직을 구현할 수 없으므로 html문서에서 간단한 로직을 처리하기 위해 장고에서 지원하는 언어
템플릿 변수 : {{  }} 로 구성 뷰에서 템플릿으로 모델의 객체를 전달하면 템플릿은 모데르이 객체에 접근할 수 있음 뷰에서 post라는 객체를 템플릿에 보내면
템플릿에서는 post의 속성을 접근할 수 있음 like {{ post.title }}
템플릿 코멘트 {# #} {% comment %} {% endcomment %}
템플릿 태그 : {% %} 로 구성 {% load static %} {% for p in post_list %}
템플릿 필터 : 템플릿 변수 다음에 | 를 그은 다음 적용하고자 하는 필터를 명시

템플릿 파일 html에서 if문 사용하기
head_image가 있는 경우, 그대로 보여주고, 없는 경우 Lorem Picsum에서 임의의 이미지 보여주기
{% if 조건 %} 보여주고 싶은 내용 A {% else %} 보여주고 싶은 내용 B {% endif %}
앱이름/templates/앱이름/post_list.html
이미지 위 문장 {% if p.head_image %}
{% else %} 이미지문장 복사 src="https://picsum.photos/seed/{{ p.pk }}/800/200" alt="random_image"로 고치기
{% endif %}

if else 문으로 첨부파일이 있는 경우 다운로드 버튼 만들기
file_upload에 파일이 담겨있을 때, 버튼 보여주기
앱이름/templates/앱이름/post_detail  <p>{{ post.content }}</p> 밑에 문장
{% if post.file_upload %}
    <a href="{{ post.file_upload.url }}" class="btn btn-outline-dark" rold="button" download>Download</a>
{% endif %}

첨부 파일명과 확장자 아이콘 나타내기
앱이름/models.py   import os 추가, 가장 마지막 줄에 함수들 추가
    def get_file_name(self):
        return os.path.basename(self.file_upload.name)

    def get_file_ext(self):  # 템플릿에서 쓰는 이름과 반드시 같아야 한다.
        return self.get_file_name().split('.')[-1]  # 가장 마지막 배열의 원소. -1
        # a.txt  -> a txt
        # b.docx -> b docx
        # c.xlsx -> c xlsx
        # a.b.c.txt -> a b c txt
아이콘 추가하기는 post_detail.html에서 38번째 줄부터 참고하기. <scrip src="폰트어썸 이용하기 위한 코드 넣기">

truncatewords 혹은 truncatechars로 텍스트 일부만 보여주기
첫 100문자만 보여주고 싶을 때 -> | truncatechars:100
첫 45개 단어만 보여주고 싶을 때 -> | truncatewords:45
앱이름/templates/앱이름/post_list.html에서 p.content만 적혀있는 부분에 | truncatechars:100 추가.

요약문 필드 만들기
앱이름/models.py에  hook_text = models.CharField(max_length=100, blank=True) 추가 마이그레이션 하기
템플릿 파일 수정하기
앱이름/templates/앱이름/post_list.html에 title밑에
{% if post.hook_text %}
    <h5 class="text-muted">{{post.hook_text}}</h5>
{% endif %}
post_detail.html에서도 바꾸는데 p 대신 post로 하기.

테스트 주도 개발
django.test.TestCase 모듈 제공
테스트 코드 작성
각 장고 앱에 tests.py 생성 TestCase 클래스 상속 Test로 시작하는 클래스 작성 test로 시작하는 함수(메소드) 작성
테스트 명령어 실행 cmder에 python manage.py test
Beautifulsoup4 설치
브라우저에 구현한 내용이 제대로 표현되었는지 확인하기 위한 라이브러리
cmder 우리 가상환경에서 pip install beautifulsoup4

assert 매서드
assertEqual(a,b) a==b  assertTrue bool(x) is True  assertIs(a,b) a is b assertIsNone(x) x is None assertIn(a,b) a in b
assertIsInstance(a,b) isinstance(a,b) assertNotEqual(a,b) a!=b assertFalse(x) bool(x) is False assertIsNot(a,b) a is not b
assertIsNotNone(x) x is not None assertNotIn(a,b) a not in b assertNotIsInstance(a,b) not isinstance(a,b)

TDD 사용 예시 (포스트 목록 페이지)
blog/tests.py에
from django.test import TestCase, Client
from bs4 import BeautifulSoup
from .models import Post

class TestView(TestCase):
    def setUp(self):
        self.client = Client()

    def test_post_list(self):
        # 1.1 포스트 목록 페이지를 가져온다.
        response = self.client.get('/blog/')
        # 1.2 정상적으로 페이지가 로드된다.
        self.assertEqual(response.status_code, 200)
        # 1.3 페이지 타이틀은 'Blog'이다.
        soup = BeautifulSoup(response.content, 'html.parser')
        self.assertEqual(soup.title.text, 'Blog')
        # 1.4 내비게이션 바가 있다.
        navbar = soup.nav
        # 1.5 Blog, About Me라는 문구가 내비게이션 바에 있다.
        self.assertIn('Blog', navbar.text)
        self.asertIn('About Me', navbar.text)

        # 2.1 포스트(게시물)가 하나도 없다면
        self.assertEqual(Post.objects.count(), 0)
        # 2.2 main area에 '아직 게시물이 없습니다'라는 문구가 나타난다.
        main_area = soup.find('div', id='main-area')
        self.assertIn('아직 게시물이 없습니다', main_area.text)

        # 3.1 포스트가 2개 있다면
        post_001 = Post.objects.create(
            title='첫 번째 포스트입니다.',
            content='Hello World. We are the world.',
        )
        post_002 = Post.objects.create(
            title='두 번째 포스트입니다.',
            content='1등이 전부는 아니잖아요?',
        )
        self.assertEqual(Post.objects.count(), 2)

        # 3.2 포스트 목록 페이지를 새로고침했을 때
        response = self.client.get('/blog/')
        soup = BeautifulSoup(response.content, 'html.parser')
        self.assertEqual(response.status_code, 200)
        # 3.3 main area에 포스트 2개의 제목이 존재한다.
        main_area = soup.find('div', id='main-area')
        self.assertIn(post_001.title, main_area.text)
        self.assertIn(post_002.title, main_area.text)
        # 3.4 '아직 게시물이 없습니다'라는 문구는 더 이상 나타나지 않는다.
        self.assertNotIn('아직 게시물이 없습니다', main_area.text)

앱이름/templates/앱이름/post_list.html의 <div class="row"> 다음줄 <div class="col-md-8 col-lg-9" id="main-area"> 수정하기.
{% if post_list.exists %} 글 목록 반복 전에 추가하기. 글 목록 반복 후에
{% else %}
    <h5>아무 게시물이 없습니다.</h5>
{% endif %}                          추가하기.

포스트 상세 페이지 테스트하기
def test_post_detail(self):
    # 1.1 포스트가 하나 있다.
    post_001 = Post.objects.create(
            title='첫 번째 포스트입니다.',
            content='Hello World. We are the world.',
        )
    # 1.2 그 포스트의 url은 '/blog/1/'이다.
    self.assertEqual(post_001.get_absolute_url(), '/blog/1/')

    # 2. 첫 번째 포스트의 상세 페이지 테스트
    # 2.1 첫 번째 포스트의 url로 접근하면 정상적으로 작동한다(status code: 200).
    response = self.client.get(post_001.get_absolute_url())
    self.assertEqual(response.status_code, 200)
    soup = BeautifulSoup(response.content, 'html.parser')

    # 2.2 포스트 목록 페이지와 똑같은 내비게이션 바가 있다.
    navbar = soup.nav
    self.assertIn('Blog', navbar.text)
    self.asertIn('About Me', navbar.text)
    # 2.3 첫 번째 포스트의 제목이 웹 브라우저 탭 타이틀에 들어있다.
    self.assertIn(post_001.title, soup.title.text)
    # 2.4 첫 번째 포스트의 제목이 포스트 영역에 있다.
    main_area = soup.find('div', id='main-area')
    post_area = main_area.find('div', id='post-area')
    self.assertIn(post_001.title, post_area.text)

    # 2.5 첫 번째 포스트의 작성자(author)가 포스트 영역에 있다(아직 구현할 수 없음).
    # 2.6 첫 번째 포스트의 내용(content)이 포스트 영역에 있다.
    self.assertIn(post_001.content, post_area.text)

test 할 때 post_list만 테스트 하고 싶다면 python manage.py test blog.tests.TestView.test_post_list    부분 테스트

페이지 구성요소 모듈화
템플릿을 모듈화 하는 이유 웹사이트의 일관적인 디자인 적용
block과 extends     base.html을 만들어 post_list.html그 안에 넣기.
{% block 블록 이름 %} base.html을 바탕으로 활용할 html 템플릿에서 이 부분을 정의해서 채워 넣을 수 있음. {% endblock %}
{% extends 파일명 %} 바탕이 될 템플릿 파일을 지정
앱이름/templates/앱이름/base.html
<div class="col-md-8 col-lg-9" id="main_area"> 밑에 블록들 다 생략 후
타이틀에 {% block head_title %}Blog{% endblock %}
{% block main_area %}
{% endblock %}
앱이름/templates/앱이름/post_list.html             base.html에서 지웠던 부분만 남기고 다 삭제
{% extends 'blog/base.html' %}
{% block main_area %}  생략했던 부분 다 가져오기
{% endblock %}
post_detail.html도 똑같이      row 밑에 col-lg-8만 남기기
{% extends 'blog/base.html' %}
{% block head_title %}
    {{ post.title }} - Blog
{% endblock %}
{% block main_area %}  생략했던 부분 다 가져오기
{% endblock %}
포스트영역은 post-area, 댓글은 comment-area로 id 설정한 div로 감싸기

내비게이션 바 버튼에 링크 추가하기

테스트 코드 작성하기
navbar = soup.nav
self.assertIn('Blog', navbar.text)
self.asertIn('About Me', navbar.text)   지우기
    def nav_test(self, soup):
        navbar = soup.nav
        self.assertIn('Blog', navbar.text)
        self.assertIn('AboutMe', navbar.text)

        home_btn = navbar.find('a', text='Home')                  # 내비게이션 바 버튼의 href 링크 테스트 코드 만들기 그리고 navbar 코드 자체 href 바꾸기.
        self.assertEqual(home_btn.attrs['href'], "/")
        blog_btn = navbar.find('a', text='Blog')
        self.assertEqual(blog_btn.attrs['href'], "/blog/")
        about_btn = navbar.find('a', text='AboutMe')
        self.assertEqual(about_btn.attrs['href'], "/about_me/")

include 포함하고 싶은 템플릿 html 정의
앱이름/templates/앱이름/base.html
{% include 'blog/navbar.html' %}              navbar.html만들어서 navbar랑 modal 옮기기

{% include 'blog/footer.html' %}              footer.html만들어서 footer 태그 옮기기

앱이름/templates/앱이름/footer.html
<!--Footer-->  푸터부분 다 여기로 들고오기

다대일 관계
Post에 작성자 추가       author
Post에 카테고리 기능 구현
A모델의 여러 레코드가 B 모델의 한 레코드에 연결될 수 있는 관계
on_delete=models.CASCADE 일 때
foreignKey 다대일 관계를 정의
on_delete: 연결되어 있던 User가 삭제 될 때   models.CASCADE 연결되어있는 post 레코드까지 함께 삭제
앱이름/models.py 에 from django.contrib.auth.models import User 추가
updated_at 밑에 author = models.ForeignKey(User, on_delete=model.CASCADE)    # 이 포스트 작성자가 데이터 베이스에서 삭제되었을 때 이 포스트도 같이 삭제한다.
on_delete=models.SET_NULL 반대가 이거임.작성자 데이터베이스에서 삭제되었을 때 빈칸으로 둔다.
def __str__(self):
    return f'[{self.pk}]{self.title} :: {self.author}' 추가

마이그레이션 - 이미 Post 레코드가 존재할 때, null 값을 허용하지 않는 새로운 필드를 만들었음. 마이그레이션을 시도하면, 이미 존재하는 post레코드에 값을 추가하기 위한 메시지가 나옴.
ForeignKey의 경우, 연결된 모델 레코드의 pk 기준으로, 마이그레이션할 때 사용할 기본값을 정의할 수 있음.

그래서!! python manage.py makemigrations 할 때 Select an option을 1로 선택하기 또 1 입력

앱이름/models.py에 updated_at 밑에 author에 user, 다음에 null=True, 추가하기. (해당 필드값이 공란이어도 OK) on_delete(연결되어있던 user가 삭제될 때.. 해당 필드값을 NULL(None)으로 바꿈
작성자 만들어서 테스트해보기.

포스트목록페이지와 포스트상세페이지에 author 반영하기
앱이름/tests.py에서 테스트코드 만들기
user 모델 사용위해 from django.contrib.auth.models import User 추가하기,
self.user_kim = User.objects.create_user(username="kim", password="somepassword")
self.user_lee = User.objects.create_user(username="lee", password="somepassword")      # user 2개만들기
  글 만들 때 author=self.user_이름 추가   test_post_list()함수에
        self.assertIn(self.post_001.author.username.upper(), main_area.text)
        self.assertIn(self.post_002.author.username.upper(), main_area.text)     추가

앱이름/templates/앱이름/post_list.html에서 작성자 {{ p.author | upper }} 으로 바꾸기       소문자 대문자 lower upper

test.py에서 test_post_detail()함수에서도 글 만들 때 author=self.user_이름   추가
앱이름/templates/앱이름/post_list.html에서 작성자 {{ post.author | upper }} 으로 바꾸기

SlugField category 모델 만들기
숫자인 pk(primary key) 대신, 읽을 수 있는 텍스트로 URL을 만들고 싶을 때 주로 사용
앱이름/models.py에 코드 추가   category = models.ForeignKey(Category, null=True, blank=True, on_delete=models.SET_NULL)
 unique=True 유일한 값을 가져야함. 이미 파이썬이라는 카테고리 레코드가 존재할 경우, 다른 레코드의 네임필드는 파이썬이 될 수 없도록 강제
allow_unicode=True 원래 한글 허용하지않으나, 한글사용가능설정
class Category(models.Model):
    name = models.CharField(max_length=50, unique=True)
    slug = models.SlugField(max_length=200, unique=True, allow_unicode=True)

    def __str__(self):
        return self.name

SlugField 자동으로 생성하는 admin 기능 만들기
prepopulated_fields name필드값으로 slug를 자동생성하도록 설정
앱이름/admin.py에 from .moddels ... 에 Category를 추가
admin.site.register(Post) 밑에

class CategoryAdmin(admin.ModelAdmin):
    prepopulated_fields = {'slug': ('name', )}
admin.site.resgister(Category, CategoryAdmin)

모델의 복수형 알려주기
앱이름/models.py 에
    class Meta:
        verbose_name_plural = 'Categories'
Post 모델의 category 필드 공란 허용하기
앱이름/models.py category = models.ForeignKey(Category, null=True, blank=True, on_delete=models.SET_NULL) null은 DB상 공란저장허용
blank=True는 admin이나 form에서 유효성검사할때공란허용
tests.py 만들기
        self.category_com = Category.objects.create(name="computer", slug="computer")
        self.category_cul = Category.objects.create(name="culture", slug="culture")

        self.post_001 = Post.objects.create(title="첫번째 포스트", content="첫번째 포스트입니다",
                                      author=self.user_kim,
                                       category=self.category_com)
        self.post_002 = Post.objects.create(title="두번째 포스트", content="두번째 포스트입니다",
                                       author=self.user_lee,
                                       category=self.category_cul)
        self.post_003 = Post.objects.create(title="세번째 포스트", content="세번째 포스트입니다",
                                       author=self.user_lee)
    def category_test(self, soup):
        category_card = soup.find('div', id='category-card')
        self.assertIn('Categories', category_card.text)
        self.assertIn(f'{self.category_com} ({self.category_com.post_set.count()})', category_card.text)
        self.assertIn(f'{self.category_cul} ({self.category_cul.post_set.count()})', category_card.text)
        self.assertIn(f'미분류 (1)', category_card.text)
tests.py 참고 !!!
base.html에 카테고리에 해당하는 div를 id를 catagories-card라고 둠. row 밑에 col-lg-6 삭제
views.py도 get_context_data()함수 집어넣기
post_list.html에 카테고리에 해당하는 html집어넣기. for, endfor문
post_list.html에서  Blog Post부분에 card mb-4부분에 id="post-{{p.pk}}"집어넣기, 뱃지 달기
sidebar.html도 고치기
tests.py에 post_001을 self.post_001로 고치기.
post_detail.html 은 post_list.html에서 사용했던 코드 가져와서 p를 post로만 고치면 됨.


get_context_data & 모델명.objects.filter(조건)
CBV에서 추가로 넘기고 싶은 인자가 있을 때 사용
앱이름/views.py from .madels import Post, Category 추가
class PostList(ListView): 밑에        CBV는 get_context_data함수를 내장하고 있으므로, 오버라이딩 한 후, 추가하고싶은 요소를 context 딕셔너리에 담아 템플릿으로 보낼 수 있음
    def get_context_data(self, *, object_list=None, **kwargs):
    context = super(PostList, self).get_context_data()
    context['categories'] = Category.objects.all()
    context['no_category_post_count'] = Post.objects.filter(category=None).count      category=None인 Post만 필터링
    return context

모델명_set
ForeignKey 에서 정보를 받아올 때 모델 post의 ForeignKey Category는 다대일관계  하나의 Category에 여러 개의 Post가 포함되는 관계
특정 Category에 속하는 Post 정보를 받아오기 위해 post_set 사용    sidebar.html에 있음!!


